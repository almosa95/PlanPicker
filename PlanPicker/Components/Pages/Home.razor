@page "/home/{Idioma}"

@using PlanPicker.Modelos
@using static PlanPicker.Modelos.FuncionesGlobalesEnums

<div class="container" style="height: 97vh; align-content: center;">
    <h3 style="font-size: 27px;">@(Idioma == "es" ? "Selecciona el tipo o los tipos de plan:" : "Select one or more plan types:")</h3>

    @if (_traducciones != null)
    {
        <div class="checkbox-container">
            @foreach (var tipo in _traducciones)
            {
                <label class="checkbox-label @(_tipoPlanSeleccionados.ContainsKey(tipo.Key) ? "active" : "")" @onclick="(e) => ActualizarFiltro(tipo.Key.ToString(), tipo.Key.ToString())">
                    @tipo.Value[Idioma]
                </label>
            }
        </div>
    }

    <button class="btn-descubrir" @onclick="IniciarAnimacion">@(Idioma == "es" ? "DESCUBRIR UN PLAN" : "DISCOVER A PLAN")</button>

    @if (MostrandoCartas)
    {
        <div class="baraja">
            @for (int i = 0; i < 5; i++)
            {
                <div class="carta @(i == CartaSeleccionada ? "seleccionada" : "")" @onclick="() => SeleccionarCarta(i)">
                    <span>🎴</span>
                </div>
            }
        </div>
    }

    @if (PlanSeleccionado != null)
    {
        <div class="resultado">
            <h2>@(Idioma == "es" ? "¡Tu Plan es...! " : "Your plan is...! ")🎉</h2>
            <p>@PlanSeleccionado.DESCRIPCION</p>
        </div>
    }

    <button style="border: none; background: inherit;  position: absolute; right: 10px; bottom: 20px;" @onclick="IrAPolitica">
        @(Idioma == "es" ? "Ver política de privacidad" : "Show privacy policy")
    </button>
</div>


@code {
    [Inject] protected NavigationManager NavigationManager { get; set; }
    [Inject] protected TranslationService TranslationsService { get; set; }
    [Parameter] public string Idioma { get; set; } = "";

    private Dictionary<string, Dictionary<string, string>>? _traducciones;
    private Dictionary<string, string> _tipoPlanSeleccionados = new();

    private List<Plan> Planes = new();
    private List<Plan> PlanesFiltrados = new();

    private Plan? PlanSeleccionado = null;

    private bool MostrandoCartas = false;
    private int CartaSeleccionada = -1;

    protected override async Task OnInitializedAsync()
    {
        Planes = FuncionesGlobales.GetPlans(Idioma);
        _traducciones = await TranslationsService.LoadJsonAsync();

        var filteredTranslations = _traducciones
            .Where(entry => entry.Value.ContainsKey(Idioma))
            .ToDictionary(
                entry => entry.Key,
                entry => entry.Value
                    .Where(lang => lang.Key == Idioma)
                    .ToDictionary(lang => lang.Key, lang => lang.Value)
            );

        _traducciones = new(filteredTranslations);

        PlanesFiltrados = new(Planes);
    }

    private void IniciarAnimacion()
    {
        MostrandoCartas = true;
        PlanSeleccionado = null;
        CartaSeleccionada = -1;
        StateHasChanged();
    }

    private void SeleccionarCarta(int index)
    {
        CartaSeleccionada = index;
        var random = new Random();
        PlanSeleccionado = PlanesFiltrados[random.Next(PlanesFiltrados.Count)];
        MostrandoCartas = false;
        StateHasChanged();
    }

    private void ActualizarFiltro(string tipo, object valor)
    {
        if (_tipoPlanSeleccionados.ContainsKey(tipo))
        {
            _tipoPlanSeleccionados.Remove(tipo);
            return;
        }

        _tipoPlanSeleccionados[tipo] = (string)valor;

        var filtrosActivos = _tipoPlanSeleccionados.Where(kvp => kvp.Value == tipo.ToString()).Select(kvp => kvp.Key).ToList();

        if (filtrosActivos.Any())
        {
            PlanesFiltrados = Planes
            .Where(plan => plan.TIPO_PLAN.Any(tipo => filtrosActivos.Contains(tipo.ToString())))
            .ToList();
        }
        else
        {
            PlanesFiltrados = new(Planes);
        }
    }

    void IrAPolitica()
    {
        if (Idioma == "es")
        {
            NavigationManager.NavigateTo("/privacy-policy");
        }
        else
        {
            NavigationManager.NavigateTo("/privacy-policy-eng");
        }
    }
}
