@page "/home/{Idioma}"

@using PlanPicker.Modelos
@using static PlanPicker.Modelos.FuncionesGlobalesEnums

@* <div style="background-image: url('img/fondo.jpg')"> *@
<div>
    <div class="container" style="height: 97vh; display: flex; flex-direction: column; justify-content: center;">
        <h3 style="font-size: 25px;">@(Idioma == "es" ? "Filtra por tipos de plan" : "Filter by plan types:")</h3>

        <p class="titulo-planes">
            @(Idioma == "es" ? "Segun la compañia:" : "By company:")
        </p>
        @if (_planesSegunCompanyia != null)
        {
            <div class="checkbox-container">
                @foreach (var tipo in _planesSegunCompanyia)
                {
                    <label class="checkbox-label @(_tipoPlanSeleccionados.ContainsKey(tipo.Key) ? "active" : "")" @onclick="(e) => ActualizarFiltro(tipo.Key.ToString(), tipo.Key.ToString())">
                        @tipo.Value[Idioma]
                    </label>
                }
            </div>
        }

        <p class="titulo-planes">
            @(Idioma == "es" ? "Segun el entorno:" : "By environment:")
        </p>
        @if (_planesSegunEntorno != null)
        {
            <div class="checkbox-container">
                @foreach (var tipo in _planesSegunEntorno)
                {
                    <label class="checkbox-label @(_tipoPlanSeleccionados.ContainsKey(tipo.Key) ? "active" : "")" @onclick="(e) => ActualizarFiltro(tipo.Key.ToString(), tipo.Key.ToString())">
                        @tipo.Value[Idioma]
                    </label>
                }
            </div>
        }

        <p class="titulo-planes">
            @(Idioma == "es" ? "Segun la actividad:" : "By activity:")
        </p>
        @if (_planesGenerales != null)
        {
            <div class="checkbox-container">
                @foreach (var tipo in _planesGenerales)
                {
                    <label class="checkbox-label @(_tipoPlanSeleccionados.ContainsKey(tipo.Key) ? "active" : "")" @onclick="(e) => ActualizarFiltro(tipo.Key.ToString(), tipo.Key.ToString())">
                        @tipo.Value[Idioma]
                    </label>
                }
            </div>
        }

        @if (!SeHaSeleccionadoPlan && !MostrandoCartas)
        {
            <button class="btn-descubrir" @onclick="IniciarAnimacion">@(Idioma == "es" ? "DESCUBRIR UN PLAN" : "DISCOVER A PLAN")</button>
        }

        @if (MostrandoCartas)
        {
            <div class="baraja">
                @for (int i = 0; i < 5; i++)
                {
                    <div class="carta @(i == CartaSeleccionada ? "seleccionada" : "")" @onclick="() => SeleccionarCarta(i)">
                        <span>🎴</span>
                    </div>
                }
            </div>
        }

        @if (PlanSeleccionado != null)
        {
            <div class="resultado">
                <h2>@(Idioma == "es" ? "¡Tu Plan es...! " : "Your plan is...! ")🎉</h2>
                <p>@PlanSeleccionado.DESCRIPCION</p>
            </div>
        }

        @if (NoSeHaEncontradoPlan)
        {
            <p>@(Idioma == "es" ? "No se ha encontrado un plan que cumpla las condiciones..! " : "There's no plan with this filters..! ")</p>
        }

        @if(SeHaSeleccionadoPlan)
        {
            <button class="btn-descubrir" @onclick="IniciarAnimacion">@(Idioma == "es" ? "DESCUBRIR OTRO PLAN" : "DISCOVER NEW PLAN")</button>
        }
    </div>

    @* <button style="border: none; background: inherit;  position: absolute; bottom: 10px; right: 0px;" @onclick="IrAPolitica">
        @(Idioma == "es" ? "Ver política de privacidad" : "Show privacy policy")
    </button> *@
</div>

@code {
    [Inject] protected NavigationManager NavigationManager { get; set; }
    [Inject] protected TranslationService TranslationsService { get; set; }
    [Parameter] public string Idioma { get; set; } = "";

    private Dictionary<string, Dictionary<string, string>>? _planesSegunCompanyia;
    private Dictionary<string, Dictionary<string, string>>? _planesSegunEntorno;
    private Dictionary<string, Dictionary<string, string>>? _planesGenerales;
    private Dictionary<string, string> _tipoPlanSeleccionados = new();

    private List<Plan> Planes = new();
    private List<Plan> PlanesFiltrados = new();

    private Plan? PlanSeleccionado = null;

    private bool NoSeHaEncontradoPlan = false;
    private bool MostrandoCartas = false;
    private bool SeHaSeleccionadoPlan = false;

    private int CartaSeleccionada = -1;

    protected override async Task OnInitializedAsync()
    {
        Planes = FuncionesGlobales.GetPlans(Idioma);
        var traducciones = await TranslationsService.LoadJsonAsync();

        var filteredTranslations = traducciones
            .Where(entry => entry.Value.ContainsKey(Idioma))
            .ToDictionary(
                entry => entry.Key,
                entry => entry.Value
                    .Where(lang => lang.Key == Idioma)
                    .ToDictionary(lang => lang.Key, lang => lang.Value)
            );


        _planesSegunCompanyia = filteredTranslations
            .Where(p => p.Key == PlanTypeEnum.Individual.ToString() || p.Key == PlanTypeEnum.Pareja.ToString() || p.Key == PlanTypeEnum.Familiar.ToString() || p.Key == PlanTypeEnum.Social.ToString())
            .ToDictionary(p => p.Key, p => p.Value);

        _planesSegunEntorno = filteredTranslations
        .Where(p => p.Key == PlanTypeEnum.Interior.ToString() || p.Key == PlanTypeEnum.Exterior.ToString() || p.Key == PlanTypeEnum.Cercano.ToString() || p.Key == PlanTypeEnum.Lejano.ToString())
        .ToDictionary(p => p.Key, p => p.Value);

        _planesGenerales = filteredTranslations
            .Where(p => p.Key == PlanTypeEnum.Aventura.ToString()
            || p.Key == PlanTypeEnum.Cultura.ToString()
            || p.Key == PlanTypeEnum.Relajacion.ToString()
            || p.Key == PlanTypeEnum.Deportes.ToString()
            || p.Key == PlanTypeEnum.Aprendizaje.ToString()
            || p.Key == PlanTypeEnum.Misterio.ToString()
            || p.Key == PlanTypeEnum.Fiesta.ToString()
            || p.Key == PlanTypeEnum.Tecnologia.ToString()
            || p.Key == PlanTypeEnum.Comida.ToString())
        .ToDictionary(p => p.Key, p => p.Value);

        PlanesFiltrados = new(Planes);
    }

    private void IniciarAnimacion()
    {
        NoSeHaEncontradoPlan = false;
        MostrandoCartas = true;
        SeHaSeleccionadoPlan = false;
        PlanSeleccionado = null;

        CartaSeleccionada = -1;
        StateHasChanged();
    }

    private async Task SeleccionarCarta(int index)
    {
        CartaSeleccionada = index;
        var random = new Random();

        if (PlanesFiltrados.Count > 0)
        {
            PlanSeleccionado = PlanesFiltrados[random.Next(PlanesFiltrados.Count)];
            NavigationManager.NavigateTo($"/plan/{PlanSeleccionado.DESCRIPCION}/{Idioma}");
        }
        else
        {
            MostrarMensajeNoHayPlan();
        }

        MostrandoCartas = false;
        SeHaSeleccionadoPlan = true;
        StateHasChanged();
    }

    private void MostrarMensajeNoHayPlan()
    {
        NoSeHaEncontradoPlan = true;
    }

    private void ActualizarFiltro(string tipo, object valor)
    {
        if (_tipoPlanSeleccionados.ContainsKey(tipo))
        {
            _tipoPlanSeleccionados.Remove(tipo);
        }
        else
        {
            _tipoPlanSeleccionados[tipo] = (string)valor;
        }

        var filtrosActivos = _tipoPlanSeleccionados.Select(kvp => kvp.Key).ToList();

        if (filtrosActivos.Any())
        {
            PlanesFiltrados = new(Planes
                                .Where(plan =>
                                filtrosActivos.All(filtro =>
                                    plan.TIPO_PLAN.Select(t => t.ToString()).Contains(filtro)))
                                .ToList());
        }
        else
        {
            PlanesFiltrados = new(Planes);
        }
    }

    void IrAPolitica()
    {
        if (Idioma == "es")
        {
            NavigationManager.NavigateTo("/privacy-policy");
        }
        else
        {
            NavigationManager.NavigateTo("/privacy-policy-eng");
        }
    }
}
